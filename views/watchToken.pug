doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
    meta(name='description', content='')
    meta(name='author', content='')
    title Watch
    // Latest compiled and minified CSS
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')
    // Optional theme
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css', integrity='sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp', crossorigin='anonymous')
  body
    nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#navbar', aria-expanded='false', aria-controls='navbar')
          a.navbar-brand(href='#')
          span#accountInUse.label.label-light(style="margin:15px 15px; float:left; font-size:15px !important;") Refresh to load Account
    .container(style='margin-top:80px;')
        .row.panel.panel-default   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Contract Address
                        |         
                        p.card-text#tokenAddress #{tokenAddress}
            |
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Token Symbol
                        |         
                        p.card-text#_symbol
            |    
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Supply
                        |         
                        p.card-text#_totalSupply
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Token Decimal
                        |         
                        p.card-text#_tokenDecimal
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Days in seconds
                        |         
                        p.card-text#_daysInSec
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Day Count
                        |         
                        p.card-text#_dayCount
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Chrono Era
                        |         
                        p.card-text#_halvingCycle
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Day Token Activated
                        |         
                        p.card-text#_dayTokenActivated
            |
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Max Addresses
                        |         
                        p.card-text#_maxAddresses
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title First Contributor ID
                        |         
                        p.card-text#_firstContributorID
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title First Post ICO Contributor ID
                        |         
                        p.card-text#_firstPostICOContributorID
            .col-sm-4
                .card
                    .card-body
                        h5.card-title First Team Contributor ID
                        |         
                        p.card-text#_firstTeamContributorID
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Maximum Minting Power
                        |         
                        p.card-text#_maxMintingPower
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Minimum Minting Power
                        |         
                        p.card-text#_minMintingPower
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Initial Block Timestamp
                        |         
                        p.card-text#_initialBlockTimestamp
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Team LockIn Period
                        |         
                        p.card-text#_teamLockingPeriod
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Normal Contributor ID
                        |         
                        p.card-text#_totalNormalContributorID
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Normal Contributor ID Allocated
                        |         
                        p.card-text#_totalNormalContributorIDAllocated
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Team Contributor ID
                        |         
                        p.card-text#_totalTeamContributorID
            |   
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Team Contributor ID Allocated
                        |         
                        p.card-text#_totalTeamContributorIDAllocated 15            
            |
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Post ICO Contributor ID
                        |         
                        p.card-text#_totalPostIcoContributorID          
            |
            .col-sm-4
                .card
                    .card-body
                        h5.card-title Total Post ICO Contributor Id Allocated
                        |         
                        p.card-text#_totalPostIcoContributorIDAllocated 15
            .col-sm-12(style="padding-bottom:10px;")
                .card
                    .card-body
                       a.btn.btn-danger(href='#',onclick="release()", style="float:right;") Release Tokens                                                                
        .row    
            .col-sm-12.panel.panel-default
                .card
                    .card-body
                        h4.card-title Allocate Time Mints
                        .form-group
                            label(for='toAddress') Receiver's Address
                            input#toAddress.form-control(type='text')
                        .form-group
                            label(for='tokenAmount') Tokens
                            input#tokenAmount.form-control(type='text')
                        .form-group
                            label(for='weiAmount') Wei Amount
                            input#weiAmount.form-control(type='text')
                        .form-group
                            label(for='timeMindId') Timemint ID
                            input#timeMintId.form-control(type='text')   
                        .form-group    
                            label#teamLabel.form-check-label
                                input#isTeam.form-check-input(type='checkbox')
                                |    Is this a team member? 
                        .form-group      
                            label#testLabel.form-check-label(style='display:none')
                                input#isTest.form-check-input(type='checkbox')
                                |   Is this a test address?     
                        a.btn.btn-primary(href='#',onclick="allocateTimemints()") Allocate    

        .panel.panel-default
            .panel-body
                .form-group
                label(for='tokenABI') Token ABI
                input#tokenABI.form-control(type='text',value=tokenABI)
                .form-group
                label(for='bytecode') Bytecode
                input#bytecode.form-control(type='text',value=bytecode_data)    
    // /.container
    // Bootstrap core JavaScript
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')
    script(src='https://cdn.rawgit.com/ethereum/web3.js/develop/dist/web3.js')
    script(src='https://code.jquery.com/jquery-3.1.1.slim.min.js')
    // Latest compiled and minified JavaScript
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js', integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa', crossorigin='anonymous')
    script(src='https://unpkg.com/sweetalert/dist/sweetalert.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.5.1/bluebird.min.js')
    
    script.
      // MetaMask injects the web3 library for us.
      var accounts;
      var abi = JSON.parse($("#tokenABI").val());
      var bytecode = $("#bytecode").val();
      var tokenNetworkAddress = "0x7941bc77E1d6BD4628467b6cD3650F20F745dB06";
       var tokenInstance;
      var TokenContract;
      var contract;


      window.onload = function() {
        var a = jQuery.Deferred(), 
        b=a.promise();
        //You can chain jQuery promises using .then
        b.then(connectWeb3).then(loadAccounts).then(getInstance).then(getAllValues);
        teamTimemints()
        a.resolve();
      }

      function getInstance(){
        tokenInstance = window.web3.eth.contract(abi).at(tokenNetworkAddress);
      }
    

      function getAllValues(){
          getSymbol();
          getTotalSupply();
          getTokenDecimal();
          getDayInSec();
          getFirstContributorID();
          getFirstPostIcoContributorId();
          getFirstTeamContributorId();
          getDayCount();
          getTotalTeamContributorIdsAllocated();
          getTotalTeamContributorIds();
          getTotalPostIcoContributorIdsAllocated();
          getTotalPostIcoContributorIds();
          getTotalNormalContributorIdsAllocated();
          getTotalNormalContributorIds();
          getTeamLockPeriodInSec();
          isReleased();
          getMinMintingPower();
          getMaxMintingPower();
          getMaxAddresses();
          getIsDayTokenActivated();
          getHalvingCycle();
      }

      function teamTimemints(){
          $('#isTeam').click(function(){
              if($(this).is(":checked")){
                $('#testLabel').css("display","block");
            }
            else if($(this).is(":not(:checked)")){
                $('#testLabel').css("display","none");
            }
        });
      }

      function allocateTimemints(){
          if($('#isTeam').is(":checked")){
                if($('#isTest').is(":checked")){
                    allocateTeamTimemints(true);
                }
                else if($('#isTest').is(":not(:checked)"))
                allocateTeamTimemints(false);
            }
            else if($('#isTeam').is(":not(:checked)")){
                allocateNormalTimemints();
            }
      }

      function allocateTeamTimemints(isTest){
          var accountTo = $('#toAddress').val();
          var timeMintId = $('#timeMintId').val();
          var tokenAmount = $('#tokenAmount').val();
          var weiPrice = $('#weiAmount').val();
          var txHash = tokenInstance.addTeamTimeMints(accountTo,timeMintId,tokenAmount,isTest, function(error, result){
                if(!error)
                    swal({
                        title: "Timemint Allocation Tx Status",
                        text: "TxHash "+result
                    });
                else
                    console.error(error);
            });           
      }

      function allocateNormalTimemints(){
          console.log("allocating timemints");
          var accountTo = $('#toAddress').val();
          var timeMintId = $('#timeMintId').val();
          var tokenAmount = $('#tokenAmount').val();
          var weiPrice = $('#weiAmount').val();
          var txHash = tokenInstance.allocateNormalTimeMints(accountTo,0,timeMintId,tokenAmount,weiPrice, function(error, result){
                if(!error)
                    swal({
                        title: "Timemint Allocation Tx Status",
                        text: "TxHash "+result
                    });
                else
                    console.error(error);
            });
      }
      

      function connectWeb3(){
        if (typeof web3 === 'undefined') {
          document.getElementById('meta-mask-required').innerHTML = '<b>You need <a href="https://metamask.io/">MetaMask</a> browser plugin to run this contract</b>'
          window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
          } 
        else 
          window.web3 = new Web3(web3.currentProvider);
          window.web3.version.getNetwork((err, netId) => {
            console.log("netiD");
            switch (netId) {
              case "1":
                swal({
                  title: "Web3 Connected",
                  text: "You are connected to Mainnet.",
                  icon: "warning" 
                });
                break
              case "2":
                swal({
                  title: "Web3 Connected",
                  text: "You are connected to deprecated network. Switch to Mainnet.",
                  icon: "warning" 
                });
                break
              case "3":
                swal({
                  title: "Web3 Connected",
                  text: "You are connected to Testnet. Switch to Mainnet.",
                  icon: "warning" 
                });
                break
              default:
                swal({
                  title: "Web3 Connected",
                  text: "You are connected to an unknown network",
                  icon: "warning" 
                });
            }
        }) 
      }
      

      function getAccountBalance(tokenInstance, accountAddress) {
          return new Promise(function(resolve, reject) {
              tokenInstance.balanceOf(accountAddress, function(error, result) {
                  if (error) {
                      reject(error);
                  } else {
                      resolve(result);
                  }
              });
          })
      }

      function loadAccounts(){
        console.log("loading Accounts");
        accounts = web3.eth.accounts;
        console.log(accounts);
        $("#accountInUse").html("Account "+accounts);
      }

      function getSymbol(){
          return new Promise(function(resolve, reject) {
              tokenInstance.symbol.call(function(error, result) {
                  if (error) {
                      $('#_symbol').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_symbol').html(result);
                       console.log(result);
                       resolve(result);}
              });
          });
      }

      function getTotalSupply(){
          return new Promise(function(resolve, reject) {
              tokenInstance.getTotalSupply.call(function(error, result) {
                  if (error) {
                      $('#_totalSupply').html('Oops');;
                      reject(error);
                  }
                   else {
                       $('#_totalSupply').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getTokenDecimal(){
          return new Promise(function(resolve, reject) {
              tokenInstance.decimals.call(function(error, result) {
                  if (error) {
                      $('#_tokenDecimal').html('Oops');;
                      reject(error);
                  }
                   else {
                       $('#_tokenDecimal').html(result.valueOf());
                       resolve(result);}
              });
          });
      }

      function getDayInSec(){
          new Promise(function(resolve,result){
              tokenInstance.DayInSecs.call(function(error, result) {
                  if (error) {
                      $('#_daysInSec').html('Oops');;
                      reject(error);
                  }
                   else {
                       $('#_daysInSec').html(result.valueOf());
                       resolve(result);}
              });
          });
      }

      function getFirstContributorID(){
          return new Promise(function(resolve,result){
              tokenInstance.firstContributorId.call(function(error, result) {
                  if (error) {
                      $('#_firstContributorID').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_firstContributorID  ').html(result.valueOf());
                       resolve(result);}
              });
          });
      }

      function getFirstPostIcoContributorId(){
           return new Promise(function(resolve,result){
              tokenInstance.firstPostIcoContributorId.call(function(error, result) {
                  if (error) {
                      $('#_firstPostIcoContributorID').html('Oops');;
                      reject(error);
                  }
                   else {
                       $('#_firstPostIcoContributorID').html(result.valueOf());;
                       resolve(result);}
              });
          });
      }

      function getFirstTeamContributorId(){
          return new Promise(function(resolve,result){
              tokenInstance.firstTeamContributorId.call(function(error, result) {
                  if (error) {
                      $('#_firstTeamContributorID').html('Oops');;
                      reject(error);
                  }
                   else {
                       $('#_firstTeamContributorID').html(result.valueOf());
                       resolve(result);}
              });
          });
      }

      function getDayCount(){
          return new Promise(function(resolve,result){
              tokenInstance.getDayCount.call(function(error, result) {
                  if (error) {
                      $('#_dayCount').html('Oops');;
                      reject(error);
                  }
                   else {
                       $('#_dayCount').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getTotalTeamContributorIdsAllocated(){
          return new Promise(function(resolve,result){
              tokenInstance.totalTeamContributorIdsAllocated.call(function(error, result) {
                  if (error) {
                      $('#_totalTeamContributorIdsAllocated').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_totalTeamContributorIdsAllocated').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getTotalTeamContributorIds(){
          return new Promise(function(resolve,result){
              tokenInstance.totalTeamContributorIds.call(function(error, result) {
                  if (error) {
                      $('#_totalTeamContributorIds').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_totalTeamContributorIds').html(result.valueOf());
                       resolve(result);}
              });
          });
      }

      function getTotalPostIcoContributorIdsAllocated(){
          return new Promise(function(resolve,result){
              tokenInstance.totalPostIcoContributorIdsAllocated.call(function(error, result) {
                  if (error) {
                      $('#_totalPostIcoContributorIdsAllocated').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_totalPostIcoContributorIdsAllocated').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getTotalPostIcoContributorIds(){
          return new Promise(function(resolve,result){
              tokenInstance.totalPostIcoContributorIds.call(function(error, result) {
                  if (error) {
                      $('#_totalPostIcoContributorIds').html('Oops');;
                      reject(error);
                  }
                   else {
                       $('#_totalPostIcoContributorIds').html(result.valueOf());
                       resolve(result);}
              });
          });
      }

      function getTotalNormalContributorIdsAllocated(){
          return new Promise(function(resolve,result){
              tokenInstance.totalNormalContributorIdsAllocated.call(function(error, result) {
                  if (error) {
                      $('#_totalNormalContributorIdsAllocated').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_totalNormalContributorIdsAllocated').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getTotalNormalContributorIds(){
          return new Promise(function(resolve,result){
              tokenInstance.totalNormalContributorIds.call(function(error, result) {
                  if (error) {
                      $('#_totalNormalContributorIds').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_totalNormalContributorIds').html(result.valueOf());
                       resolve(result);}
              });
          });
      }

      function getTeamLockPeriodInSec(){
          return new Promise(function(resolve,result){
              tokenInstance.teamLockPeriodInSec.call(function(error, result) {
                  if (error) {
                      $('#_teamLockPeriodInSec').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_teamLockPeriodInSec').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function isReleased(){
          return new Promise(function(resolve,result){
              tokenInstance.released.call(function(error, result) {
                  if (error) {
                      $('#_released').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_released').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getMinMintingPower(){
          return new Promise(function(resolve,result){
              tokenInstance.minMintingPower.call(function(error, result) {
                  if (error) {
                      $('#_minMintingPower').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_minMintingPower').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getMaxMintingPower(){
          return new Promise(function(resolve,result){
              tokenInstance.maxMintingPower.call(function(error, result) {
                  if (error) {
                      $('#_maxMintingPower').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_maxMintingPower').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getMaxAddresses(){
          return new Promise(function(resolve,result){
              tokenInstance.maxAddresses.call(function(error, result) {
                  if (error) {
                      $('#_maxAddresses').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_maxAddresses').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getIsDayTokenActivated(){
          return new Promise(function(resolve,result){
              tokenInstance.isDayTokenActivated.call(function(error, result) {
                  if (error) {
                      $('#_isDayTokenActivated').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_isDayTokenActivated').html(result.valueOf());
                       resolve(result);}
              });
          });
      }
      function getHalvingCycle(){
          return new Promise(function(resolve,result){
              tokenInstance.halvingCycle.call(function(error, result) {
                  if (error) {
                      $('#_halvingCycle').html('Oops');
                      reject(error);
                  }
                   else {
                       $('#_halvingCycle').html(result.valueOf());
                       resolve(result);}
              });
          });
      }